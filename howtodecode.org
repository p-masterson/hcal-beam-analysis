* Translating HcalIDs

I've yanked out some of the code from the DetDescr part of LDMX-sw to deal with
the various DetectorID's that we have lying around.

There are two IDs that are relevant for our kind of analysis now that the
RawDecoder seems to be mostly working, the HcalDigiID and HcalID.

The HcalDigiID represents a readoutchannel specified by section, layer, bar, and
end and is what we get from the HgcrocDigiCollection.

The HcalID represents an individual bar specified by section, layer, and bar and is what we get from running reconstruction.

When I wrote this stuff, I wanted to be able to test things carefully so I
needed to be able to construct these IDs from both the raw ID and the individual
pieces. Therefore, there are two "constructors" so you create them like

#+begin_src python
hid=HcalDigiID().from_ID(raw_id)
hid=HcalDigiID().from_vars(section, layer, bar, end)
#+end_src

There is a member function to tell you if the end is negative. But you can also
just check, 1 means negative 0 means positive. Layers start from 1.

You can get the individual pieces of an ID through corresponding member
functions
#+begin_src python
section=hid.section()
layer=hid.layer()
bar=hid.bar()
end=hid.end()
#+end_src



* How to get the RawDecoding to work

First of all, we need to have LDMX-sw with the iss998-hgcroc branch for both
LDMX-sw and the Hcal submodule. Next, for now at least we need the following
"patches"/"hacks".

- Ignore duplicate mappings

  Currently, we are getting duplicate electronics IDs from our map. I'm not sure how, but at the moment I'm just skipping this by commenting out the exception on line 70 in https://github.com/LDMX-Software/Hcal/blob/iss998-hgcroc/src/Hcal/HcalDetectorMap.cxx

  We need to find out what's going on here...


- +Hard code the detector map instead of using the conditions system+ hopefully not needed any more

  In https://github.com/LDMX-Software/Hcal/blob/iss998-hgcroc/src/Hcal/HcalRawDecoder.cxx
  Change line 332 from

  #+begin_src C++
  auto detmap{
      getCondition<HcalDetectorMap>(HcalDetectorMap::CONDITIONS_OBJECT_NAME)};
  #+end_src
  to
  #+begin_src C++
  auto detmap = HcalDetectorMap("testbeam_connections.csv", false);
  #+end_src

  This assumes that the connections file is available in the current directory. Otherwise, just change it to what you want

- Add a bogus column to the testbeam_connections.csv file

  The CSV loader consistently fails to parse the last column in the csv file.
  I'm suspecting that there's some whitespace related issue because the name of
  the column is one character longer than it should be. For now, I've just been
  adding in an extra final column without any meaning to the CSV file. In other words, the structure of the file looks like this

  #+begin_src TXT
   HGCROC,Channel,CMB,Quadbar,Bar,Plane,Ignore
   1,0,1,1,4,1,0
   1,1,1,1,3,1,0
  #+end_src

- Add 256 to the HGCROC number

  The ROC_ID from the data stream starts from 256. Not sure if that's what it's
  supposed to do, but since that's what we are getting we'll have to make sure
  that the stuff from testbeam_connections.csv matches. I'm just adding 256 in
  code instead of changing the table.

  In  https://github.com/LDMX-Software/Hcal/blob/iss998-hgcroc/src/Hcal/HcalDetectorMap.cxx

  change line 64 from
  #+begin_src C++
          csv.getInteger("HGCROC") /*fiber*/,
  #+end_src
  to
  #+begin_src C++
          csv.getInteger("HGCROC") + 256/*fiber*/,
  #+end_src
